openapi: 3.0.0
info:
  title: Ed-Tech API Documentation
  version: 1.0.0
  description: API for managing authentication, competitions, and participants.

servers:
  - url: http://localhost:3000
    description: Development server
  - url: ${API_URL}
    description: Staging server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CompetitionInput:
      type: object
      properties:
        title: { type: string }
        deadline: { type: string, format: date }
        duration: { type: string }
        prize: { type: string }
        contactEmail: { type: string, format: email }
        brief: { type: string }
        description: { type: string }
        requirement: { type: string }
        deliverables: { type: string }
        status: { type: string }
        skills:
          type: array
          items: { type: string }
        seniorityLevel:
          type: array
          items: { type: string }
        category: { type: string }
      required:
        - title
        - deadline
        - duration
        - prize
        - contactEmail
        - brief
        - description
        - requirement
        - deliverables
        - status
        - skills
        - seniorityLevel
        - category

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: Endpoints for user registration and login
  - name: Competitions
    description: Endpoints related to competitions


paths:
  # Authentication
  /user/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ADMIN, CLIENT, TALENT]
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [role, firstName, lastName, email, password]
      responses:
        "201": { description: User registered successfully }
        "400": { description: Bad request - Missing or invalid input }
        "409": { description: Conflict - Email already registered }
        "500": { description: Internal server error }

  /user/login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [email, password]
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400": { description: Bad request - Missing email or password }
        "401": { description: Unauthorized - Incorrect password }
        "404": { description: User not found }
        "500": { description: Internal server error }

  /user/profile:
    get:
      tags: [Authentication]
      summary: Get user profile
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: User profile retrieved successfully }
        "401": { description: Unauthorized }
        "404": { description: Profile not found }

  # Competitions
  /competitions:
    post:
      tags: [Competitions]
      summary: Create a new competition
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionInput"
      responses:
        "201": { description: Competition created successfully }
        "401": { description: Unauthorized }
        "409": { description: Conflict - Duplicate competition }
    get:
      tags: [Competitions]
      summary: Get all competitions
      parameters:
        - name: page
          in: query
          schema: { type: integer }
        - name: limit
          in: query
          schema: { type: integer }
        - name: search
          in: query
          schema: { type: string }
      responses:
        "200": { description: Competitions retrieved successfully }

  /competitions/{id}:
    get:
      tags: [Competitions]
      summary: Get a single competition
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Competition retrieved successfully }
        "404": { description: Competition not found }
    put:
      tags: [Competitions]
      summary: Update a competition
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionInput"
      responses:
        "200": { description: Competition updated successfully }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Competition not found }
    delete:
      tags: [Competitions]
      summary: Delete a competition
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Competition deleted successfully }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Competition not found }

  /competitions/{id}/apply:
    post:
      tags: [Competitions]
      summary: Apply to a competition
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "201": { description: Application submitted successfully }
        "400": { description: No competition ID provided }
        "401": { description: Unauthorized - No user found }
        "404": { description: Competition not found }
        "409": { description: Already applied to this competition }

  /competitions/{id}/participants:
    get:
      tags: [Competitions]
      summary: Get competition participants
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Participants retrieved successfully }
        "400": { description: No competition ID provided }
        "401": { description: Unauthorized - No user found }
        "404": { description: Competition not found }

  # Statistics
  /competitions/total:
    get:
      tags: [Competitions]
      summary: Get total number of competitions
      security: [{ bearerAuth: [] }]
      parameters:
        - name: filter
          in: query
          schema: { type: string }
      responses:
        "200": { description: Total competitions retrieved successfully }
        "401": { description: Unauthorized }

  /competitions/status/completed:
    get:
      tags: [Competitions]
      summary: Get competitions with status 'completed'
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Completed competitions retrieved successfully }
        "401": { description: Unauthorized }

  /competitions/status/open:
    get:
      tags: [Competitions]
      summary: Get competitions with status 'open'
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Open competitions retrieved successfully }
        "401": { description: Unauthorized }

  /competitions/status/ongoing:
    get:
      tags: [Competitions]
      summary: Get competitions with status 'ongoing'
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Ongoing competitions retrieved successfully }
        "401": { description: Unauthorized }

  /users/talent:
    get:
      tags: [Competitions]
      summary: Get total number of talents applied in competitions
      security: [{ bearerAuth: [] }]
      parameters:
        - name: filter
          in: query
          schema: { type: string }
      responses:
        "200": { description: Total talents retrieved successfully }
        "401": { description: Unauthorized }
